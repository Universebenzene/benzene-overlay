From a1d664808c4c60c348f51f9ed3726c4c27faec25 Mon Sep 17 00:00:00 2001
From: qjfoidnh <qjfoidnh@126.com>
Date: Sat, 14 Dec 2024 13:40:00 +0800
Subject: [PATCH] update go version 1.23

---
 go.mod                           |  2 +-
 pcsutil/cachepool/malloc.go      | 32 +++-----------------------------
 pcsutil/cachepool/malloc_test.go | 10 ----------
 3 files changed, 4 insertions(+), 40 deletions(-)

diff --git a/go.mod b/go.mod
index 2795324..100d95d 100644
--- a/go.mod
+++ b/go.mod
@@ -1,6 +1,6 @@
 module github.com/qjfoidnh/BaiduPCS-Go
 
-go 1.18
+go 1.23
 
 require (
 	github.com/GeertJohan/go.incremental v1.0.0
diff --git a/pcsutil/cachepool/malloc.go b/pcsutil/cachepool/malloc.go
index 307a2d4..4879044 100644
--- a/pcsutil/cachepool/malloc.go
+++ b/pcsutil/cachepool/malloc.go
@@ -1,33 +1,7 @@
 package cachepool
 
-import (
-	"reflect"
-	"unsafe"
-)
-
-//go:linkname mallocgc runtime.mallocgc
-func mallocgc(size uintptr, typ uintptr, needzero bool) unsafe.Pointer
-
-//go:linkname rawbyteslice runtime.rawbyteslice
-func rawbyteslice(size int) (b []byte)
-
-// RawByteSlice point to runtime.rawbyteslice
-func RawByteSlice(size int) (b []byte) {
-	return rawbyteslice(size)
-}
-
-// RawMalloc allocates a new slice. The slice is not zeroed.
-func RawMalloc(size int) unsafe.Pointer {
-	return mallocgc(uintptr(size), 0, false)
-}
-
-// RawMallocByteSlice allocates a new byte slice. The slice is not zeroed.
+// RawMallocByteSlice allocates a new byte slice.
 func RawMallocByteSlice(size int) []byte {
-	p := mallocgc(uintptr(size), 0, false)
-	b := *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{
-		Data: uintptr(p),
-		Len:  size,
-		Cap:  size,
-	}))
-	return b
+	bytesArray := make([]byte, size)
+	return bytesArray
 }
diff --git a/pcsutil/cachepool/malloc_test.go b/pcsutil/cachepool/malloc_test.go
index 6e2a530..1aabbc3 100644
--- a/pcsutil/cachepool/malloc_test.go
+++ b/pcsutil/cachepool/malloc_test.go
@@ -3,10 +3,8 @@ package cachepool_test
 import (
 	"fmt"
 	"github.com/qjfoidnh/BaiduPCS-Go/pcsutil/cachepool"
-	"reflect"
 	"runtime"
 	"testing"
-	"unsafe"
 )
 
 func TestMalloc(t *testing.T) {
@@ -20,12 +18,4 @@ func TestMalloc(t *testing.T) {
 	b = cachepool.RawMallocByteSlice(128)
 	fmt.Printf("---%s---\n", b)
 	runtime.GC()
-
-	b = cachepool.RawByteSlice(128)
-	fmt.Println(b)
-	runtime.GC()
-
-	b = cachepool.RawByteSlice(127)
-	bH := (*reflect.SliceHeader)(unsafe.Pointer(&b))
-	fmt.Printf("%#v\n", bH)
 }
